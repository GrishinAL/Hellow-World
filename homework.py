# Для удобства добавил функцию печати
def printArray(array):
    for j in range(len(array)):  # range(stop)/range(start, stop)/range(start, stop, step)
        for i in range(len(array[j])):
            print("{:4d}".format(array[j][i]), end='')  # ("{:4d}".format()) - Выравнивание по правому краю, ширина 4, пустое место заполняется пробельнами символами
        print()  # переход на новую строку

# Заполнение матрицы через numpy
"""
                              1  2  3  4
                              5  6  7  8
                              9 10 11 12
                             13 14 15 16
"""

import numpy as np  # Добавляем поддержку массивов и матриц

a = 6  # кол-во строк
b = 6  # кол-во столбцов
c = a * b + 1
matrix = np.arange(1, c).reshape(a, b)  # Генерируем матрицу со здначениями по возрастанию от 1 до c и размером a*b
print('numpy matrix: ', end='\n')
printArray(matrix)  # нормальная матрица (без изменений)


# 1) Заполнение матрицы через цикл по возрастанию _________________________________
"""
                             1  2  3  4
                             5  6  7  8
                             9 10 11 12
                            13 14 15 16
"""
n = 4  # строки
# m = 4  # столбцы
array = [0] * n
for i in range(n):
    array[i] = [0] * n
# создали массив: [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]

for i in range(0, n):
    for j in range(0, n):
        array[i][j] = i * n + j + 1
print('1. Заполнение по возрастанию: ', end='\n')
printArray(array)
# __________________________________________________________________

# 2) Заполнение матрицы через цикл змейкой_________________________________
"""
                         1  2  3  4
                         8  7  6  5
                         9 10 11 12
                        16 15 14 13
"""
n = 4  # строки
# m = 4  # столбцы
array = [0] * n
for i in range(n):
    array[i] = [0] * n
for i in range(0, n):  # строка
    for j in range(0, n):
        if i % 2 == 0:
            array[i][j] = i*n+j+1
        else:
            array [i][j] = i*n+n-j
print('2. Заполнение змейкой: ', end='\n')
printArray(array)
# __________________________________________________________________

# 3) Заполнение матрицы через цикл перевернутой змейкой_________________________________
"""
                        1  8  9 16
                        2  7 10 15
                        3  6 11 14
                        4  5 12 13
"""
n = 4  # строки
# m = 4  # столбцы
array = [0] * n
for i in range(n):
    array[i] = [0] * n
for i in range(0, n):
    for j in range(0, n):
        if i % 2 == 0:
            array[j][i] = i*n+j+1
        else:
            array [j][i] = i*n+n-j
print('3. Заполнение перевернутой змейкой: ', end='\n')
printArray(array)
# __________________________________________________________________

# 4) Заполнение матрицы через цикл спиралью_________________________________
"""
                        1  2  3  4  5
                        16 17 18 19 6
                        15 24 25 20 7
                        14 23 22 21 8
                        13 12 11 10 9
"""

n = 5  # кол-во строк/столбцов
array = [0] * n
for i in range(n):
    array[i] = [0] * n

k = 1  # счетчик для записи в матрицу
m = 0  # коеффициент, используемый для заполнения верхней матрицы последующих витков, т.к. одномерные матрицы следующих витков имеют меньше значений
array[n//2][n//2] = n * n  # Заранее присваиваю значение центральному элементу матрицы
# // - получение целой части от деления
for i in range(n//2):  # i = 0,1,2
    for j in range(n-m):  # верх range 5>3>1
        array[i][j+i] = k  # array[0][0] -> array[0][5] = 1 -> 5 / array[1][1] -> array[1][3] = ??? /
        k = k + 1  # в конце st = 6
    for j in range(i+1, n-i):  # право
        array[j][-i-1] = k
        k = k + 1
    for j in range(i+1, n-i):  # низ
        array[-i-1][-j-1] = k
        k = k + 1
    for j in range(i+1, n-(i+1)):  # лево
        array[-j-1][i] = k
        k = k + 1
    m = m+2
print('4. Заполнение спиралью: ', end='\n')
printArray(array)
# __________________________________________________________________

# 5) Заполнение массив длины N рандомными числами и найти максимум _________________________________
import numpy as np
array = np.random.randint(0, 999, 10)  # от, до, размер массива
print('Массив рандомных чисел: ', array)
max = 0
for i in range(len(array)):
    if array[i] > max:
        max = array[i]
    else:
        i = i+1
print ('Max = ', max)

# 6) Заполнение массив длины N рандомными числами и найти минимум _________________________________

import numpy as np
array = np.random.randint(0, 999, 10)  # от, до, размер массива
print('Массив рандомных чисел: ', array)

min = array [0]
for i in range(len(array)):
    if array[i] < min:
        min = array[i]
    else:
        i = i+1
print ('Min = ', min)

# 6) Найти индекс 1 числа вложенного массива _________________________________
print('', end='\n')

import numpy as np
import random as rd
import array
L1 = 10  # Длина 1 массива
L2 = rd.randint(1, L1-1) # Длина 2 массива
a = np.random.randint(0, 2, L1)  # Задаем массив с рандомными значениями (от, до, размер массива)
b = np.random.randint(0, 2, L2)  # Задаем массив с рандомными значениями (от, до, размер массива)
c = []
L3 = (L1 - L2) + 1  # Разница длин массивов a и b
print('Array 1 = ', a)
print('Array 2 = ', b)
print('L3 = ', L3)
# тест
for i in range(0, L3):
    if a[i] == b[0]:
        print('TRUE1')
        for j in range(1, L2):
            if a[i+1] == b[j]:
                print('true',i+1)
                i=i+1
            else:
                print('false',i)
                break
    else:
        print('false0000')








"""
range(стоп) от 0 до стоп (не включая стоп)
range(старт, стоп) от старт (включительно) до стоп (не включая стоп)
range(старт, стоп, шаг) [старт стоп) шаг
"""

"""
# вариант 1
for i in range(len(array_1)):
    if (array_2[0] == array_1[i] and array_2[1] == array_1[i+1]):
        print('Result: i = ', i)
        break
    elif i == len(array_1)-1:
        print('Result: -1')
        
        
"""
# __________________________________________________________________